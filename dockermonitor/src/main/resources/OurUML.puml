@startuml
'https://plantuml.com/class-diagram'

class ActionRequest {
    #actionType: String
    #containerId: String
    #newName: String
    +ActionRequest()
    +ActionRequest(String, String)
    +ActionRequest(String, String, String)
    +getActionType(): String
    +setActionType(String): void
    +getContainerId(): String
    +setContainerId(String): void
    +getNewName(): String
}
class ClientUpdater {
    +connectionAccomplished(): void
    +getUpdatedContainersFromClient(): List<Container>
    +getUpdatedImagesFromClient(): List<Image>
    +getUpdatedVolumesFromClient(): List<InspectVolumeResponse>
    +getUpdatedNetworksFromClient(): List<Network>
    +getUpdatedClient(): DockerClient
    +closeClient(DockerClient): void
    +getUpdatedStatus(String): String
    +connectToDatabase(String, String, String, String): Connection
    +getIp(): String
}
class DatabaseThread {
    #ip: String
    #containers: int
    #connection: Connection
    +DatabaseThread(Connection, String)
    +run(): void
    +giveMeCount(): int
    +takeCredentials(): Connection
    +readContainersFromCsv(Connection, int): void
    +addToMeasurements(Connection, int): void
    +newUser(Connection, String): boolean
    +getEverythingFromDatabase(): List<Sting[]>
    +getEverythingFromCsv(): List<String[]>
    +changeSystemIp(String): void
    +changeName(String, String): void
    +removeContainer(String): void
    +implementContainer(String, String, String,String): void
    +updateDatabase(): void
    +searchInCsv(String): boolean
    +searchInDatabase(): boolean
}
class DockerImage {
    +imageslist: List<DockerImage>
    #imageRep: String
    #imageTag: String
    #imageId: String
    +DockerImage(String, String, String)
    +getImageRep(): String
    +getImageTag(): String
    +getImageId(): String
    +toString(): String
    +implementImage(): String
    +findContainers(): List<Container>
    +removeImage(): void
    +listUsedImages(): List<String>
    +pullImage(String): void
}
class DockerInstance {
    +containeslist: List<dDockerInstance>
    #containerId: String
    #image: String
    #status: String
    #name: String
    +DockerInstance(String, String, String, String)
    +getContainerId(): String
    +getContainerName(): String
    +getContainerImage(): String
    +getContainerStatus(): String
    +toString(): String
    +stopContainer(): void
    +startContainer(): void
    +renameContainer(String): void
    +removeContainer(): void
    +restartContainer(): void
    +pauseContainer(): void
    +unpauseContainer(): void
    +killContainer(): void
    +showLogs(String): List<String>
}
class DockerMonitor {
    #lastState: List<String[]>
    #currentData: List<String[]>
    +run(): void
    +setCurrentData(List<String[]>): void
    +writeCsv(): void
    +hasNewData(): boolean
    +listsAreEqual(List<String[]>, List<String[]>): boolean
}
class DockerNetwork {
    +networkslist: list<DockerNetwork>
    #networkId: String
    #name: String
    #driver: String
    #scope: String
    +DockerNetwork(String, String, String, String)
    +getNetworkId(): String
    +getName(): String
    +getDriver(): String
    +getScope(): String
    +toString(): String
    +inspectContainersForSubnet(String): String
    +formatSubnetsSettings(): StringBuilder
}
class DockerVolume {
    +volueslist: List<DockerVolume>
    #driver: String
    #name: String
    #created: String
    #mountpoint: String
    +DockerVolume(String, String, String, String)
    +getDriver(): String
    +getName(): String
    +getCreated(): String
    +getMountpoint(): String
    +toString(): String
    +createdAt(String): String
}
class ExecutorThread {
    #actionQueue: BlockingQueue<ActionRequest>
    +ExecutorThread(BlockingQueue<ActionRequest>)
    #name2Rename: String
    +run(): void
    #performDockerAction(String, String): void
    +findContainerInClient(String): DockerInstance
    +findImageInClient(String): DockerImage
    #startContainer(String): void
    #stopContainer(String): void
    #renameContainer(String, String): void
    #removeContainer(String): void
    #restartContainer(String): void
    #pauseContainer(String): void
    #unpauseContainer(String): void
    #killContainer(String): void
    #implementImage(String): void
    #removeImage(String): void
}
class Lists {
    +choiceContainers: List<String>
    +choiceImages: List<String>
    +listImage(): void
    +listContainers(): void
    +listVolumes(): void
    +listNetworks(): void
}
class PerformActionHandler {
    #actionQueue: BlockingQueue<ActionRequest>
    #gson: Gson
    +PerformActionHandler(BlockingQueue<ActionRequest>, Gson)
    +handle(HttpExchange): void
}
class MainSceneController {}

'Composition'
ActionRequest <|--* PerformActionHandler
ActionRequest <|--* ExecutorThread
'Dependency'
ActionRequest <|.. MainSceneController

ClientUpdater <|.. DatabaseThread
ClientUpdater <|.. Lists
ClientUpdater <|.. DockerImage
ClientUpdater <|.. DockerInstance
ClientUpdater <|.. DockerMonitor
ClientUpdater <|.. MainSceneController

DatabaseThread <|.. MainSceneController

DockerImage <|.. ExecutorThread
DockerImage <|.. Lists
DockerImage <|.. MainSceneController

DockerInstance <|.. ExecutorThread
DockerInstance <|.. Lists
DockerInstance <|.. DockerImage
DockerInstance <|.. MainSceneController

DockerMonitor <|.. MainSceneController

DockerNetwork <|.. Lists
DockerNetwork <|.. MainSceneController

DockerVolume <|.. Lists
DockerVolume <|.. MainSceneController

ExecutorThread <|.. MainSceneController

Lists <|.. MainSceneController

PerformActionHandler <|.. MainSceneController

@enduml